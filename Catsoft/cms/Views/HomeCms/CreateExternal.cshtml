@using App.cms.Helpers
@using App.cms.Repositories.CmsModels
@using App.cms.StaticHelpers
@using App.cms.ViewModels
@using App.cms.ViewModels.Properties
@using App.Models
@inject ICmsCmsModelRepository ModelRepository
@inject TypesOptions TypesOptions
@model dynamic

@{
    Layout = "~/CMS/Views/Shared/_LayoutCms.cshtml";
    ViewData["isCreating"] = true;

    var type = (Type)Model.GetType();
    var properties = ReflectionHelper.GetPropertiesInView(type, ViewData).ToList();

    var nameType = (string)ViewBag.NameType;
    var cmsSection = ModelRepository.GetByClass(nameType);

    var stringType = typeof(string);

    ViewData["TitleToTopLabelE"] = cmsSection.Title;

    var other = properties.Where(w => w.PropertyType != TypesOptions.File && w.PropertyType != TypesOptions.Image).ToList();

    var isImage = ReflectionHelper.IsImage(type);
}


<div class="offset-md-1 col-md-10">
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-4">
                <h2>@await Html.RenderText("Creation")</h2>
            </div>
            <div class="offset-md-6 col-md-2">
                <h4>
                    <a asp-action="GetList" asp-route-type="@(nameType)">@await Html.RenderText("Return_to_the_list")</a>
                </h4>
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <hr/>
    </div>

    <div class="col-md-12">
        <h4>@(cmsSection.Title)</h4>
    </div>
    <div class="col-md-12">

        <hr/>
    </div>


    @if (isImage)
    {
        @await Html.PartialAsync("~/CMS/Views/HomeCms/Image.cshtml", new ImageViewModel())
    }
    else
    {
        @await Html.PartialAsync("~/CMS/Views/Shared/Properties/FilesProperties.cshtml", Model, ViewData)

        @await Html.PartialAsync("~/CMS/Views/Shared/Properties/ImagesProperties.cshtml", Model, ViewData)

        <div class="row">
            <div class="col-md-12">
                <form asp-action="Create" method="post" enctype="multipart/form-data">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div style="display: none" id="filesHiddenInputs"></div>
                    <div style="display: none" id="imagesHiddenInputs"></div>

                    @Html.Hidden("type", type.Name)
                    @foreach (var propertyInfo in other)
                    {
                        <div class="col-md-12" style="margin-bottom: 30px;">
                            @{
                                var name = ReflectionHelper.GetNameProperty(propertyInfo);
                                var propertyType = propertyInfo.PropertyType;
                                var isHtml = ReflectionHelper.IsHtml(propertyInfo);
                                var isArray = ReflectionHelper.IsArray(propertyInfo);
                                var isBool = ReflectionHelper.IsBool(propertyInfo);
                            }

                            <div class="form-group">
                                <div class="col-md-2">
                                    <span style="font-weight: bold">
                                        @Html.DisplayName(name)
                                    </span>
                                </div>
                                <div class="col-md-10">
                                    @if (isHtml)
                                    {
                                        @await Html.PartialAsync("~/CMS/Views/Shared/Properties/HtmlProperty.cshtml", new PropertyViewModel(Model, propertyInfo))
                                    }
                                    else if (isArray)
                                    {
                                        @await Html.PartialAsync("~/CMS/Views/Shared/Properties/OneToManyProperty.cshtml", new PropertyViewModel(Model, propertyInfo))
                                    }
                                    else if (propertyType.IsClass && propertyType != stringType)
                                    {
                                        @await Html.PartialAsync("~/CMS/Views/Shared/Properties/OneToOneProperty.cshtml", new PropertyViewModel(Model, propertyInfo))
                                    }
                                    else if (propertyType.IsEnum)
                                    {
                                        @await Html.PartialAsync("~/CMS/Views/Shared/Properties/EnumProperty.cshtml", new PropertyViewModel(Model, propertyInfo))
                                    }
                                    else if (isBool)
                                    {
                                        @await Html.PartialAsync("~/CMS/Views/Shared/Properties/BoolProperty.cshtml", new PropertyViewModel(Model, propertyInfo))
                                    }
                                    else
                                    {
                                        @await Html.PartialAsync("~/CMS/Views/Shared/Properties/SimpleTypeProperty.cshtml", new PropertyViewModel(Model, propertyInfo))
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    <div class="form-group col-md-4 offset-md-5" style="margin-top: 60px; margin-bottom: 50px;">
                        <input type="submit" value="Создать" class="btn btn-primary"/>
                    </div>
                </form>
            </div>
        </div>
    }
</div>