@inject CatsoftContext DbCatsoftContext
@inject TextResourceRepository TextResourceRepository
@using App.cms.Helpers
@using App.cms.Repositories.TextResource
@using App.Models
@using App.Utils
@model App.ViewModels.Views.SelectorViewModel
@removeTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    Layout = null;
    var propertyName = Model.Label.RemoveWhitespace();
    var text = await TextResourceRepository.GetByTagAsync("Not selected");
    var selectList = Model.Options.Select(w => new SelectListItem
    {
        Text = w.Label,
        Value = w.Value,
        Selected = w.Value == Model.SelectedValue
    }).ToList();
    if (Model.WithDefaultValue)
    {
        selectList.Insert(0, new SelectListItem { Value = "", Text = text });
    }

    var disabled = Model.Enabled ? "" : "disabled";
}

<div class="text-start">
    <span class="text4 text-gray mb-2 text-start text-non-caps">
        @await Html.RenderText(Model.Label)
    </span>

    <select class="form-select text4 text-black" aria-label="@await TextResourceRepository.GetByTagAsync(Model.Label)" onchange="@Model.OnChangeScript"
            id="@propertyName" name="@propertyName" @disabled>
        @foreach (var i in selectList)
        {
            var selected = i.Value == Model.SelectedValue ? "selected" : "";
            <option value="@i.Value" @selected>@i.Text.ToUpper()</option>
        }
    </select>
</div>